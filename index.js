const express = require('express');
const line = require('@line/bot-sdk');
const axios = require('axios');
const cron = require('node-cron');
const path = require('path');

const app = express();

// ÈùúÊÖãÊñá‰ª∂ÊúçÂãô
app.use(express.static('public'));

// LINE BotË®≠ÂÆö
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// Á©∫Ê∞£ÂìÅË≥™APIË®≠ÂÆö
const WAQI_TOKEN = 'b144682944ddd13da46203e66fed4fd6be745619';
const WAQI_BASE_URL = 'https://api.waqi.info';

// ÂâµÂª∫LINE BotÂÆ¢Êà∂Á´Ø
const client = new line.Client(config);

// Ë®ÇÈñ±ÁÆ°ÁêÜÔºàÂú®ÂØ¶ÈöõÈÉ®ÁΩ≤‰∏≠Âª∫Ë≠∞‰ΩøÁî®Ë≥áÊñôÂ∫´Ôºâ
let subscriptions = new Map(); // userId -> {cities: [], settings: {}}
let locationCache = new Map(); // userId -> {lat, lng, timestamp}

// ÂüéÂ∏ÇÂ∞çÊáâË°®
const cityMap = {
  'Âè∞Âåó': 'taipei',
  'Âè∞‰∏≠': 'taichung',
  'Âè∞Âçó': 'tainan',
  'È´òÈõÑ': 'kaohsiung',
  'Êñ∞Âåó': 'new-taipei',
  'Ê°ÉÂúí': 'taoyuan',
  'Âü∫ÈöÜ': 'keelung',
  'Êñ∞Á´π': 'hsinchu',
  'ËãóÊ†ó': 'miaoli',
  'ÂΩ∞Âåñ': 'changhua',
  'ÂçóÊäï': 'nantou',
  'Èõ≤Êûó': 'yunlin',
  'ÂòâÁæ©': 'chiayi',
  'Â±èÊù±': 'pingtung',
  'ÂÆúËò≠': 'yilan',
  'Ëä±ËìÆ': 'hualien',
  'Âè∞Êù±': 'taitung',
  'ÊæéÊπñ': 'penghu',
  'ÈáëÈñÄ': 'kinmen',
  'È¶¨Á•ñ': 'matsu',
  'Âåó‰∫¨': 'beijing',
  '‰∏äÊµ∑': 'shanghai',
  'Êù±‰∫¨': 'tokyo',
  'È¶ñÁàæ': 'seoul',
  'ÊõºË∞∑': 'bangkok',
  'Êñ∞Âä†Âù°': 'singapore',
  'È¶ôÊ∏Ø': 'hong-kong',
  'Êæ≥ÈñÄ': 'macau'
};

// Ë®àÁÆóÂÖ©ÈªûÈñìË∑ùÈõ¢ÔºàÂÖ¨ÈáåÔºâ
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // Âú∞ÁêÉÂçäÂæëÔºàÂÖ¨ÈáåÔºâ
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// Ê†πÊìö‰ΩçÁΩÆÊü•ÊâæÈôÑËøëÁöÑÁõ£Ê∏¨Á´ô
async function findNearbyStations(lat, lng) {
  try {
    const url = `${WAQI_BASE_URL}/search/?token=${WAQI_TOKEN}&keyword=geo:${lat};${lng}`;
    const response = await axios.get(url);
    
    if (response.data.status === 'ok' && response.data.data.length > 0) {
      // Ë®àÁÆóË∑ùÈõ¢‰∏¶ÊéíÂ∫è
      const stationsWithDistance = response.data.data
        .filter(station => station.geo && station.geo.length === 2)
        .map(station => ({
          ...station,
          distance: calculateDistance(lat, lng, station.geo[0], station.geo[1])
        }))
        .sort((a, b) => a.distance - b.distance)
        .slice(0, 3); // ÂèñÂâç3ÂÄãÊúÄËøëÁöÑÁ´ôÈªû
      
      return stationsWithDistance;
    }
    return [];
  } catch (error) {
    console.error('Êü•ÊâæÈôÑËøëÁõ£Ê∏¨Á´ôÈåØË™§:', error);
    return [];
  }
}

// Ë®ÇÈñ±ÁÆ°ÁêÜÂäüËÉΩ
function addSubscription(userId, city) {
  if (!subscriptions.has(userId)) {
    subscriptions.set(userId, {
      cities: [],
      settings: {
        dailyReport: true,
        emergencyAlert: true,
        threshold: 100
      }
    });
  }
  
  const userSub = subscriptions.get(userId);
  if (!userSub.cities.includes(city)) {
    userSub.cities.push(city);
    return true;
  }
  return false;
}

function removeSubscription(userId, city) {
  if (subscriptions.has(userId)) {
    const userSub = subscriptions.get(userId);
    const index = userSub.cities.indexOf(city);
    if (index > -1) {
      userSub.cities.splice(index, 1);
      return true;
    }
  }
  return false;
}

function getUserSubscriptions(userId) {
  return subscriptions.get(userId) || { cities: [], settings: {} };
}

// ÂâµÂª∫ÈôÑËøëÁõ£Ê∏¨Á´ôFlex Message
function createNearbyStationsFlexMessage(stations, userLat, userLng) {
  if (stations.length === 0) {
    return {
      type: 'text',
      text: 'üòî Êä±Ê≠âÔºåÊâæ‰∏çÂà∞ÊÇ®ÈôÑËøëÁöÑÁ©∫Ê∞£ÂìÅË≥™Áõ£Ê∏¨Á´ô„ÄÇ\nË´ãÂòóË©¶Êü•Ë©¢ÁâπÂÆöÂüéÂ∏ÇÁöÑÁ©∫Ê∞£ÂìÅË≥™„ÄÇ'
    };
  }

  const flexMessage = {
    type: 'flex',
    altText: `ÈôÑËøëÁõ£Ê∏¨Á´ô - ÊâæÂà∞ ${stations.length} ÂÄãÁ´ôÈªû`,
    contents: {
      type: 'bubble',
      styles: {
        header: {
          backgroundColor: '#4CAF50'
        }
      },
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìç ÈôÑËøëÁ©∫Ê∞£ÂìÅË≥™Áõ£Ê∏¨Á´ô',
            weight: 'bold',
            color: '#ffffff',
            size: 'lg',
            align: 'center'
          }
        ]
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: []
      }
    }
  };

  stations.forEach((station, index) => {
    const aqiInfo = getAQILevel(station.aqi || 0);
    const distanceText = station.distance < 1 ? 
      `${Math.round(station.distance * 1000)}ÂÖ¨Â∞∫` : 
      `${station.distance.toFixed(1)}ÂÖ¨Èáå`;

    flexMessage.contents.body.contents.push(
      {
        type: 'box',
        layout: 'horizontal',
        spacing: 'sm',
        margin: index > 0 ? 'md' : 'none',
        contents: [
          {
            type: 'text',
            text: `${index + 1}`,
            size: 'lg',
            weight: 'bold',
            flex: 1,
            color: '#666666',
            align: 'center'
          },
          {
            type: 'box',
            layout: 'vertical',
            flex: 4,
            contents: [
              {
                type: 'text',
                text: station.station?.name || 'Êú™Áü•Á´ôÈªû',
                weight: 'bold',
                size: 'md',
                color: '#333333',
                wrap: true
              },
              {
                type: 'text',
                text: `Ë∑ùÈõ¢: ${distanceText}`,
                size: 'xs',
                color: '#999999'
              }
            ]
          },
          {
            type: 'box',
            layout: 'vertical',
            flex: 3,
            contents: [
              {
                type: 'text',
                text: `AQI ${station.aqi || 'N/A'}`,
                weight: 'bold',
                size: 'md',
                color: aqiInfo.color,
                align: 'end'
              },
              {
                type: 'text',
                text: aqiInfo.level,
                size: 'xs',
                color: '#666666',
                align: 'end'
              }
            ]
          }
        ]
      }
    );

    if (index < stations.length - 1) {
      flexMessage.contents.body.contents.push({
        type: 'separator',
        margin: 'md'
      });
    }
  });

  return flexMessage;
}

// ÊØèÊó•ÂÆöÊôÇÊé®ÈÄÅÁ©∫Ê∞£ÂìÅË≥™Â†±ÂëäÔºàÊØèÂ§©Êó©‰∏ä8ÈªûÔºâ
cron.schedule('0 8 * * *', async () => {
  console.log('ÈñãÂßãÁôºÈÄÅÊØèÊó•Á©∫Ê∞£ÂìÅË≥™Â†±Âëä...');
  
  for (const [userId, subscription] of subscriptions.entries()) {
    if (subscription.settings.dailyReport && subscription.cities.length > 0) {
      try {
        // ÁÇ∫Áî®Êà∂Ë®ÇÈñ±ÁöÑÂüéÂ∏ÇÂâµÂª∫Â†±Âëä
        const cityData = await getMultipleCitiesAirQuality(
          subscription.cities.map(city => ({ chinese: city, english: city }))
        );
        
        if (cityData.length > 0) {
          const dailyReportMessage = createDailyReportFlexMessage(cityData);
          await client.pushMessage(userId, dailyReportMessage);
        }
      } catch (error) {
        console.error(`ÁôºÈÄÅÊØèÊó•Â†±ÂëäÁµ¶Áî®Êà∂ ${userId} Â§±Êïó:`, error);
      }
    }
  }
}, {
  timezone: "Asia/Taipei"
});

// Ê™¢Êü•Á∑äÊÄ•Ë≠¶Â†±ÔºàÊØèÂ∞èÊôÇÊ™¢Êü•‰∏ÄÊ¨°Ôºâ
cron.schedule('0 * * * *', async () => {
  for (const [userId, subscription] of subscriptions.entries()) {
    if (subscription.settings.emergencyAlert && subscription.cities.length > 0) {
      try {
        for (const city of subscription.cities) {
          const airQualityData = await getAirQuality(city);
          
          // Â¶ÇÊûúAQIË∂ÖÈÅéÁî®Êà∂Ë®≠ÂÆöÁöÑÈñæÂÄºÔºåÁôºÈÄÅË≠¶Â†±
          if (airQualityData.aqi > subscription.settings.threshold) {
            const alertMessage = createEmergencyAlertMessage(airQualityData);
            await client.pushMessage(userId, alertMessage);
          }
        }
      } catch (error) {
        console.error(`Ê™¢Êü•Á∑äÊÄ•Ë≠¶Â†±Áµ¶Áî®Êà∂ ${userId} Â§±Êïó:`, error);
      }
    }
  }
}, {
  timezone: "Asia/Taipei"
});

// AQIÁ≠âÁ¥öÂà§Êñ∑
function getAQILevel(aqi) {
  if (aqi <= 50) return { level: 'ËâØÂ•Ω', color: '#00e400', emoji: 'üòä' };
  if (aqi <= 100) return { level: 'ÊôÆÈÄö', color: '#ffff00', emoji: 'üòê' };
  if (aqi <= 150) return { level: 'Â∞çÊïèÊÑüÊóèÁæ§‰∏çÂÅ•Â∫∑', color: '#ff7e00', emoji: 'üò∑' };
  if (aqi <= 200) return { level: '‰∏çÂÅ•Â∫∑', color: '#ff0000', emoji: 'üò∞' };
  if (aqi <= 300) return { level: 'ÈùûÂ∏∏‰∏çÂÅ•Â∫∑', color: '#8f3f97', emoji: 'ü§¢' };
  return { level: 'Âç±Èö™', color: '#7e0023', emoji: '‚ò†Ô∏è' };
}

// ÂÅ•Â∫∑Âª∫Ë≠∞Á≥ªÁµ±
function getHealthAdvice(aqi) {
  if (aqi <= 50) {
    return {
      general: 'Á©∫Ê∞£ÂìÅË≥™Ê•µ‰Ω≥ÔºÅÈÅ©ÂêàÊâÄÊúâÊà∂Â§ñÊ¥ªÂãï',
      sensitive: 'ÊïèÊÑüÊóèÁæ§‰πüÂèØÊ≠£Â∏∏Êà∂Â§ñÊ¥ªÂãï',
      exercise: 'üèÉ‚Äç‚ôÇÔ∏è Ê•µÈÅ©ÂêàÔºöË∑ëÊ≠•„ÄÅÈ®éËªä„ÄÅÁôªÂ±±Á≠âÈ´òÂº∑Â∫¶ÈÅãÂãï',
      mask: 'üòä ÁÑ°ÈúÄÈÖçÊà¥Âè£ÁΩ©',
      indoor: 'ü™ü ÂèØÈñãÁ™óÈÄöÈ¢®Ôºå‰∫´ÂèóÊñ∞ÈÆÆÁ©∫Ê∞£',
      color: '#00e400'
    };
  } else if (aqi <= 100) {
    return {
      general: 'Á©∫Ê∞£ÂìÅË≥™ÂèØÊé•ÂèóÔºå‰∏ÄËà¨‰∫∫Áæ§ÂèØÊ≠£Â∏∏Ê¥ªÂãï',
      sensitive: '‚ö†Ô∏è ÊïèÊÑüÊóèÁæ§Ë´ãÊ∏õÂ∞ëÈï∑ÊôÇÈñìÊà∂Â§ñÂäáÁÉàÈÅãÂãï',
      exercise: 'üö∂‚Äç‚ôÇÔ∏è ÈÅ©ÂêàÔºöÊï£Ê≠•„ÄÅÁëú‰ºΩ„ÄÅËºïÂ∫¶ÊÖ¢Ë∑ë',
      mask: 'üò∑ Âª∫Ë≠∞ÈÖçÊà¥‰∏ÄËà¨Âè£ÁΩ©',
      indoor: 'ü™ü ÂèØÈÅ©Â∫¶ÈñãÁ™óÔºå‰øùÊåÅÁ©∫Ê∞£ÊµÅÈÄö',
      color: '#ffff00'
    };
  } else if (aqi <= 150) {
    return {
      general: 'Â∞çÊïèÊÑüÊóèÁæ§‰∏çÂÅ•Â∫∑Ôºå‰∏ÄËà¨‰∫∫Áæ§Ê∏õÂ∞ëÊà∂Â§ñÊ¥ªÂãï',
      sensitive: 'üö® ÊïèÊÑüÊóèÁæ§ÊáâÈÅøÂÖçÊà∂Â§ñÊ¥ªÂãï',
      exercise: 'üè† Âª∫Ë≠∞ÂÆ§ÂÖßÈÅãÂãïÔºöÁëú‰ºΩ„ÄÅ‰º∏Â±ï„ÄÅÈáçË®ì',
      mask: 'üò∑ ÂøÖÈ†àÈÖçÊà¥N95ÊàñÈÜ´Áî®Âè£ÁΩ©',
      indoor: 'üö™ ÈóúÈñâÈñÄÁ™óÔºå‰ΩøÁî®Á©∫Ê∞£Ê∏ÖÊ∑®Ê©ü',
      color: '#ff7e00'
    };
  } else if (aqi <= 200) {
    return {
      general: 'ÊâÄÊúâ‰∫∫Áæ§ÈÉΩÊáâÊ∏õÂ∞ëÊà∂Â§ñÊ¥ªÂãï',
      sensitive: 'üö´ ÊïèÊÑüÊóèÁæ§Ë´ãÁïôÂú®ÂÆ§ÂÖß',
      exercise: 'üè† ÂÉÖÂª∫Ë≠∞ÂÆ§ÂÖßËºïÂ∫¶Ê¥ªÂãï',
      mask: 'üò∑ Â§ñÂá∫ÂøÖÈ†àÈÖçÊà¥N95Âè£ÁΩ©',
      indoor: 'üö™ Á∑äÈñâÈñÄÁ™óÔºåÊåÅÁ∫å‰ΩøÁî®Á©∫Ê∞£Ê∏ÖÊ∑®Ê©ü',
      color: '#ff0000'
    };
  } else if (aqi <= 300) {
    return {
      general: 'ÊâÄÊúâ‰∫∫Áæ§ÈÅøÂÖçÊà∂Â§ñÊ¥ªÂãï',
      sensitive: 'üè† ÊâÄÊúâ‰∫∫ÊáâÁïôÂú®ÂÆ§ÂÖß',
      exercise: 'üö´ ÈÅøÂÖç‰ªª‰ΩïÊà∂Â§ñÈÅãÂãï',
      mask: 'üò∑ Â§ñÂá∫ÂãôÂøÖÈÖçÊà¥N95ÊàñÊõ¥È´òÁ≠âÁ¥öÂè£ÁΩ©',
      indoor: 'üö™ Á∑äÈñâÈñÄÁ™óÔºå‰ΩøÁî®È´òÊïàÁ©∫Ê∞£Ê∏ÖÊ∑®Ê©ü',
      color: '#8f3f97'
    };
  } else {
    return {
      general: '‚ö†Ô∏è Á∑äÊÄ•ÁãÄÊ≥ÅÔºÅÊâÄÊúâ‰∫∫ÊáâÁïôÂú®ÂÆ§ÂÖß',
      sensitive: 'üö® Á´ãÂç≥Â∞ãÊ±ÇÂÆ§ÂÖßÈÅøÈõ£Â†¥ÊâÄ',
      exercise: 'üö´ Á¶ÅÊ≠¢ÊâÄÊúâÊà∂Â§ñÊ¥ªÂãï',
      mask: 'üò∑ Â§ñÂá∫ÂøÖÈ†àÈÖçÊà¥Â∞àÊ•≠Èò≤Ë≠∑Âè£ÁΩ©',
      indoor: 'üö™ ÂØÜÈñâÂÆ§ÂÖßÔºå‰ΩøÁî®È´òÊïàÁ©∫Ê∞£Ê∏ÖÊ∑®Ë®≠ÂÇô',
      color: '#7e0023'
    };
  }
}

// Ëß£ÊûêËá™ÁÑ∂Ë™ûË®ÄÊü•Ë©¢
function parseQuery(text) {
  const cleanText = text.toLowerCase().replace(/[Á©∫Ê∞£ÂìÅË≥™|Á©∫Ê∞£|Á©∫ÂìÅ|pm2.5|aqi|Êü•Ë©¢|ÊÄéÈ∫ºÊ®£|Â¶Ç‰Ωï]/g, '');
  
  // Ê™¢Êü•ÊòØÂê¶ÁÇ∫Ë®ÇÈñ±Áõ∏ÈóúÊåá‰ª§
  if (text.includes('Ë®ÇÈñ±') || text.includes('subscribe')) {
    return parseSubscribeQuery(text);
  }
  
  // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÂèñÊ∂àË®ÇÈñ±
  if (text.includes('ÂèñÊ∂àË®ÇÈñ±') || text.includes('unsubscribe')) {
    return { type: 'unsubscribe', content: text };
  }
  
  // Ê™¢Êü•ÊòØÂê¶ÁÇ∫Êü•ÁúãË®ÇÈñ±
  if (text.includes('ÊàëÁöÑË®ÇÈñ±') || text.includes('Ë®ÇÈñ±Ê∏ÖÂñÆ')) {
    return { type: 'list_subscriptions' };
  }
  
  // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÊØîËºÉÊü•Ë©¢
  if (text.includes('ÊØîËºÉ') || text.includes('vs') || text.includes('Â∞çÊØî')) {
    return parseCompareQuery(text);
  }
  
  // Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´ÂüéÂ∏ÇÂêçÁ®±
  for (const [chinese, english] of Object.entries(cityMap)) {
    if (text.includes(chinese) || cleanText.includes(english)) {
      return { type: 'single', city: english };
    }
  }
  
  // Â¶ÇÊûúÊ≤íÊúâÊâæÂà∞ÁâπÂÆöÂüéÂ∏ÇÔºåËøîÂõûnull
  return null;
}

// Ëß£ÊûêË®ÇÈñ±Êü•Ë©¢
function parseSubscribeQuery(text) {
  for (const [chinese, english] of Object.entries(cityMap)) {
    if (text.includes(chinese)) {
      return { type: 'subscribe', city: english, cityName: chinese };
    }
  }
  return { type: 'subscribe', city: null };
}

// Ëß£ÊûêÊØîËºÉÊü•Ë©¢
function parseCompareQuery(text) {
  const cities = [];
  for (const [chinese, english] of Object.entries(cityMap)) {
    if (text.includes(chinese)) {
      cities.push({ chinese, english });
    }
  }
  
  if (cities.length >= 2) {
    return { type: 'compare', cities: cities.slice(0, 5) }; // ÊúÄÂ§öÊØîËºÉ5ÂÄãÂüéÂ∏Ç
  }
  
  return null;
}

// Áç≤ÂèñÁ©∫Ê∞£ÂìÅË≥™Êï∏Êìö
async function getAirQuality(city) {
  try {
    const url = `${WAQI_BASE_URL}/feed/${city}/?token=${WAQI_TOKEN}`;
    const response = await axios.get(url);
    
    if (response.data.status === 'ok') {
      return response.data.data;
    } else {
      throw new Error('ÁÑ°Ê≥ïÁç≤ÂèñÁ©∫Ê∞£ÂìÅË≥™Êï∏Êìö');
    }
  } catch (error) {
    console.error('Áç≤ÂèñÁ©∫Ê∞£ÂìÅË≥™Êï∏ÊìöÈåØË™§:', error);
    throw error;
  }
}

// Áç≤ÂèñÂ§öÂÄãÂüéÂ∏ÇÁöÑÁ©∫Ê∞£ÂìÅË≥™Êï∏Êìö
async function getMultipleCitiesAirQuality(cities) {
  try {
    const promises = cities.map(async (cityInfo) => {
      try {
        const url = `${WAQI_BASE_URL}/feed/${cityInfo.english}/?token=${WAQI_TOKEN}`;
        const response = await axios.get(url);
        if (response.data.status === 'ok') {
          return {
            ...response.data.data,
            chineseName: cityInfo.chinese
          };
        }
        return null;
      } catch (error) {
        console.error(`Áç≤Âèñ${cityInfo.chinese}Á©∫Ê∞£ÂìÅË≥™Â§±Êïó:`, error);
        return null;
      }
    });
    
    const results = await Promise.all(promises);
    return results.filter(result => result !== null);
  } catch (error) {
    console.error('Áç≤ÂèñÂ§öÂüéÂ∏ÇÁ©∫Ê∞£ÂìÅË≥™Êï∏ÊìöÈåØË™§:', error);
    throw error;
  }
}

// ÂâµÂª∫ÊØèÊó•Â†±ÂëäFlex Message
function createDailyReportFlexMessage(citiesData) {
  const bestCity = citiesData.reduce((best, current) => 
    current.aqi < best.aqi ? current : best
  );
  
  return {
    type: 'flex',
    altText: `ÊØèÊó•Á©∫Ê∞£ÂìÅË≥™Â†±Âëä - ÊúÄ‰Ω≥: ${bestCity.chineseName}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üåÖ ÊØèÊó•Á©∫Ê∞£ÂìÅË≥™Â†±Âëä',
            weight: 'bold',
            color: '#ffffff',
            size: 'lg'
          }
        ],
        paddingAll: '20px',
        backgroundColor: '#4CAF50',
        spacing: 'md',
        height: '60px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: citiesData.map(city => {
          const aqiInfo = getAQILevel(city.aqi);
          return {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: city.chineseName,
                weight: 'bold',
                size: 'sm',
                color: '#333333'
              },
              {
                type: 'text',
                text: `AQI ${city.aqi}`,
                weight: 'bold',
                size: 'sm',
                color: aqiInfo.color,
                align: 'end'
              }
            ],
            margin: 'md'
          };
        })
      }
    }
  };
}

// ÂâµÂª∫Á∑äÊÄ•Ë≠¶Â†±Ë®äÊÅØ
function createEmergencyAlertMessage(airQualityData) {
  const aqiInfo = getAQILevel(airQualityData.aqi);
  
  return {
    type: 'text',
    text: `üö® Á©∫Ê∞£ÂìÅË≥™Ë≠¶Â†±ÔºÅ\n\n` +
          `üìç ${airQualityData.city.name}\n` +
          `üí® AQI: ${airQualityData.aqi} (${aqiInfo.level})\n\n` +
          `‚ö†Ô∏è Âª∫Ë≠∞Á´ãÂç≥Êé°ÂèñÈò≤Ë≠∑Êé™ÊñΩÔºö\n` +
          `‚Ä¢ ÈÅøÂÖçÊà∂Â§ñÊ¥ªÂãï\n` +
          `‚Ä¢ ÈÖçÊà¥N95Âè£ÁΩ©\n` +
          `‚Ä¢ ÈóúÈñâÈñÄÁ™ó\n` +
          `‚Ä¢ ‰ΩøÁî®Á©∫Ê∞£Ê∏ÖÊ∑®Ê©ü`
  };
}

// ÂâµÂª∫Flex Message
function createAirQualityFlexMessage(data) {
  const aqiInfo = getAQILevel(data.aqi);
  const healthAdvice = getHealthAdvice(data.aqi);
  const updateTime = new Date(data.time.iso).toLocaleString('zh-TW', {
    timeZone: 'Asia/Taipei',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });

  const flexMessage = {
    type: 'flex',
    altText: `${data.city.name} Á©∫Ê∞£ÂìÅË≥™ AQI: ${data.aqi}`,
    contents: {
      type: 'bubble',
      styles: {
        header: {
          backgroundColor: aqiInfo.color
        }
      },
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: `${aqiInfo.emoji} Á©∫Ê∞£ÂìÅË≥™Â†±Âëä`,
            weight: 'bold',
            color: '#ffffff',
            size: 'lg',
            align: 'center'
          }
        ]
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: [
              {
                type: 'box',
                layout: 'baseline',
                spacing: 'sm',
                contents: [
                  {
                    type: 'text',
                    text: 'ÂüéÂ∏Ç',
                    color: '#aaaaaa',
                    size: 'sm',
                    flex: 2
                  },
                  {
                    type: 'text',
                    text: data.city.name,
                    wrap: true,
                    color: '#666666',
                    size: 'sm',
                    flex: 5
                  }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                spacing: 'sm',
                contents: [
                  {
                    type: 'text',
                    text: 'AQI',
                    color: '#aaaaaa',
                    size: 'sm',
                    flex: 2
                  },
                  {
                    type: 'text',
                    text: data.aqi.toString(),
                    wrap: true,
                    color: aqiInfo.color,
                    size: 'xl',
                    weight: 'bold',
                    flex: 5
                  }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                spacing: 'sm',
                contents: [
                  {
                    type: 'text',
                    text: 'Á≠âÁ¥ö',
                    color: '#aaaaaa',
                    size: 'sm',
                    flex: 2
                  },
                  {
                    type: 'text',
                    text: aqiInfo.level,
                    wrap: true,
                    color: '#666666',
                    size: 'sm',
                    flex: 5
                  }
                ]
              },
              {
                type: 'separator',
                margin: 'md'
              },
              {
                type: 'text',
                text: 'üè• ÂÅ•Â∫∑Âª∫Ë≠∞',
                weight: 'bold',
                size: 'md',
                margin: 'md',
                color: '#333333'
              },
              {
                type: 'text',
                text: healthAdvice.general,
                wrap: true,
                color: '#666666',
                size: 'sm',
                margin: 'sm'
              },
              {
                type: 'text',
                text: healthAdvice.sensitive,
                wrap: true,
                color: '#666666',
                size: 'sm',
                margin: 'xs'
              },
              {
                type: 'text',
                text: healthAdvice.exercise,
                wrap: true,
                color: '#666666',
                size: 'sm',
                margin: 'xs'
              },
              {
                type: 'text',
                text: healthAdvice.mask,
                wrap: true,
                color: '#666666',
                size: 'sm',
                margin: 'xs'
              },
              {
                type: 'separator',
                margin: 'md'
              },
              {
                type: 'text',
                text: 'üìä Ë©≥Á¥∞Êï∏Êìö',
                weight: 'bold',
                size: 'md',
                margin: 'md',
                color: '#333333'
              }
            ]
          }
        ]
      }
    }
  };

  // Ê∑ªÂä†Ë©≥Á¥∞Ê±°ÊüìÁâ©Êï∏Êìö
  if (data.iaqi) {
    const pollutants = [
      { key: 'pm25', name: 'PM2.5', unit: 'Œºg/m¬≥' },
      { key: 'pm10', name: 'PM10', unit: 'Œºg/m¬≥' },
      { key: 'o3', name: 'Ëá≠Ê∞ß', unit: 'ppb' },
      { key: 'no2', name: '‰∫åÊ∞ßÂåñÊ∞Æ', unit: 'ppb' },
      { key: 'so2', name: '‰∫åÊ∞ßÂåñÁ°´', unit: 'ppb' },
      { key: 'co', name: '‰∏ÄÊ∞ßÂåñÁ¢≥', unit: 'mg/m¬≥' }
    ];

    pollutants.forEach(pollutant => {
      if (data.iaqi[pollutant.key]) {
        flexMessage.contents.body.contents[0].contents.push({
          type: 'box',
          layout: 'baseline',
          spacing: 'sm',
          contents: [
            {
              type: 'text',
              text: pollutant.name,
              color: '#aaaaaa',
              size: 'sm',
              flex: 2
            },
            {
              type: 'text',
              text: `${data.iaqi[pollutant.key].v} ${pollutant.unit}`,
              wrap: true,
              color: '#666666',
              size: 'sm',
              flex: 5
            }
          ]
        });
      }
    });
  }

  // Ê∑ªÂä†Êõ¥Êñ∞ÊôÇÈñì
  flexMessage.contents.footer = {
    type: 'box',
    layout: 'vertical',
    spacing: 'sm',
    contents: [
      {
        type: 'separator'
      },
      {
        type: 'text',
        text: `Êõ¥Êñ∞ÊôÇÈñì: ${updateTime}`,
        color: '#aaaaaa',
        size: 'xs',
        align: 'center',
        margin: 'sm'
      }
    ]
  };

  return flexMessage;
}

// ÂâµÂª∫ÂüéÂ∏ÇÈÅ∏ÊìáÂø´ÈÄüÂõûË¶Ü
function createCityQuickReply() {
  const popularCities = ['Âè∞Âåó', 'Âè∞‰∏≠', 'Âè∞Âçó', 'È´òÈõÑ', 'Êñ∞Âåó', 'Ê°ÉÂúí'];
  
  return {
    type: 'text',
    text: 'Ë´ãÈÅ∏ÊìáË¶ÅÊü•Ë©¢ÁöÑÂüéÂ∏ÇÔºåÊàñÁõ¥Êé•Ëº∏ÂÖ•ÂüéÂ∏ÇÂêçÁ®±Ôºö\n\nüí° ÂäüËÉΩÊèêÁ§∫Ôºö\n‚Ä¢ Êü•Ë©¢Ôºö„ÄåÂè∞ÂåóÁ©∫Ê∞£ÂìÅË≥™„Äç\n‚Ä¢ ÊØîËºÉÔºö„ÄåÊØîËºÉÂè∞ÂåóÈ´òÈõÑ„Äç\n‚Ä¢ Ë®ÇÈñ±Ôºö„ÄåË®ÇÈñ±Âè∞Âåó„Äç\n‚Ä¢ ÂÆö‰ΩçÔºöÁõ¥Êé•ÂàÜ‰∫´‰ΩçÁΩÆ',
    quickReply: {
      items: [
        ...popularCities.map(city => ({
          type: 'action',
          action: {
            type: 'message',
            label: city,
            text: `Êü•Ë©¢${city}Á©∫Ê∞£ÂìÅË≥™`
          }
        })),
        {
          type: 'action',
          action: {
            type: 'message',
            label: 'ÊØîËºÉÂüéÂ∏Ç',
            text: 'ÊØîËºÉÂè∞ÂåóÂè∞‰∏≠È´òÈõÑ'
          }
        },
        {
          type: 'action',
          action: {
            type: 'message',
            label: 'ÊàëÁöÑË®ÇÈñ±',
            text: 'ÊàëÁöÑË®ÇÈñ±Ê∏ÖÂñÆ'
          }
        },
        {
          type: 'action',
          action: {
            type: 'location',
            label: 'ÂàÜ‰∫´‰ΩçÁΩÆ'
          }
        }
      ]
    }
  };
}

// ÂâµÂª∫Â§öÂüéÂ∏ÇÊØîËºÉFlex Message
function createCityComparisonFlexMessage(citiesData) {
  // ÊåâAQIÊéíÂ∫è
  const sortedCities = citiesData.sort((a, b) => a.aqi - b.aqi);
  
  // Ê±∫ÂÆöÊúÄ‰Ω≥ÂüéÂ∏ÇÁöÑÂª∫Ë≠∞
  const bestCity = sortedCities[0];
  const worstCity = sortedCities[sortedCities.length - 1];
  const bestAqiInfo = getAQILevel(bestCity.aqi);
  
  const flexMessage = {
    type: 'flex',
    altText: `Â§öÂüéÂ∏ÇÁ©∫Ê∞£ÂìÅË≥™ÊØîËºÉ - ÊúÄ‰Ω≥: ${bestCity.chineseName} AQI: ${bestCity.aqi}`,
    contents: {
      type: 'bubble',
      styles: {
        header: {
          backgroundColor: '#4CAF50'
        }
      },
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üèÜ Â§öÂüéÂ∏ÇÁ©∫Ê∞£ÂìÅË≥™ÊØîËºÉ',
            weight: 'bold',
            color: '#ffffff',
            size: 'lg',
            align: 'center'
          }
        ]
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìä ÊéíÂêçÁµêÊûúÔºàÁî±‰Ω≥Ëá≥Â∑ÆÔºâ',
            weight: 'bold',
            size: 'md',
            margin: 'lg',
            color: '#333333'
          }
        ]
      }
    }
  };

  // Ê∑ªÂä†ÊéíÂêçÂúñÊ®ô
  const rankEmojis = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];

  // ÁÇ∫ÊØèÂÄãÂüéÂ∏ÇÊ∑ªÂä†ÊéíÂêçË≥áË®ä
  sortedCities.forEach((city, index) => {
    const aqiInfo = getAQILevel(city.aqi);
    const rankEmoji = rankEmojis[index] || `${index + 1}Ô∏è‚É£`;
    
    flexMessage.contents.body.contents.push({
      type: 'box',
      layout: 'horizontal',
      spacing: 'sm',
      margin: 'md',
      contents: [
        {
          type: 'text',
          text: rankEmoji,
          size: 'lg',
          flex: 1,
          align: 'center'
        },
        {
          type: 'box',
          layout: 'vertical',
          flex: 4,
          contents: [
            {
              type: 'text',
              text: city.chineseName,
              weight: 'bold',
              size: 'md',
              color: '#333333'
            },
            {
              type: 'text',
              text: `${city.city.name}`,
              size: 'xs',
              color: '#999999'
            }
          ]
        },
        {
          type: 'box',
          layout: 'vertical',
          flex: 3,
          contents: [
            {
              type: 'text',
              text: `AQI ${city.aqi}`,
              weight: 'bold',
              size: 'md',
              color: aqiInfo.color,
              align: 'end'
            },
            {
              type: 'text',
              text: aqiInfo.level,
              size: 'xs',
              color: '#666666',
              align: 'end'
            }
          ]
        }
      ]
    });
    
    // Ê∑ªÂä†ÂàÜÈöîÁ∑öÔºàÈô§‰∫ÜÊúÄÂæå‰∏ÄÂÄãÔºâ
    if (index < sortedCities.length - 1) {
      flexMessage.contents.body.contents.push({
        type: 'separator',
        margin: 'md'
      });
    }
  });

  // Ê∑ªÂä†ÊóÖË°åÂª∫Ë≠∞
  const recommendation = bestCity.aqi <= 100 ? 
    `‚úàÔ∏è Êé®Ëñ¶ÂâçÂæÄ ${bestCity.chineseName}ÔºÅÁ©∫Ê∞£ÂìÅË≥™${bestAqiInfo.level}` :
    `‚ö†Ô∏è ÊâÄÊúâÂüéÂ∏ÇÁ©∫Ê∞£ÂìÅË≥™ÈÉΩÈúÄÊ≥®ÊÑèÔºå${bestCity.chineseName} Áõ∏Â∞çÊúÄ‰Ω≥`;

  flexMessage.contents.body.contents.push(
    {
      type: 'separator',
      margin: 'lg'
    },
    {
      type: 'text',
      text: 'üéØ ÊóÖË°åÂª∫Ë≠∞',
      weight: 'bold',
      size: 'md',
      margin: 'lg',
      color: '#333333'
    },
    {
      type: 'text',
      text: recommendation,
      wrap: true,
      color: '#666666',
      size: 'sm',
      margin: 'sm'
    }
  );

  // Ê∑ªÂä†Êõ¥Êñ∞ÊôÇÈñì
  const updateTime = new Date().toLocaleString('zh-TW', {
    timeZone: 'Asia/Taipei',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });

  flexMessage.contents.footer = {
    type: 'box',
    layout: 'vertical',
    spacing: 'sm',
    contents: [
      {
        type: 'separator'
      },
      {
        type: 'text',
        text: `Êõ¥Êñ∞ÊôÇÈñì: ${updateTime}`,
        color: '#aaaaaa',
        size: 'xs',
        align: 'center',
        margin: 'sm'
      }
    ]
  };

  return flexMessage;
}

// ËôïÁêÜLINEË®äÊÅØ
async function handleEvent(event) {
  if (event.type !== 'message') {
    return Promise.resolve(null);
  }

  const userId = event.source.userId;

  // ËôïÁêÜ‰ΩçÁΩÆË®äÊÅØ
  if (event.message.type === 'location') {
    try {
      const { latitude, longitude } = event.message;
      locationCache.set(userId, { lat: latitude, lng: longitude, timestamp: Date.now() });
      
      const nearbyStations = await findNearbyStations(latitude, longitude);
      const flexMessage = createNearbyStationsFlexMessage(nearbyStations, latitude, longitude);
      
      return client.replyMessage(event.replyToken, flexMessage);
    } catch (error) {
      console.error('ËôïÁêÜ‰ΩçÁΩÆË®äÊÅØÈåØË™§:', error);
      const errorMessage = {
        type: 'text',
        text: 'üòµ Êü•Ë©¢ÈôÑËøëÁ©∫Ê∞£ÂìÅË≥™ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ'
      };
      return client.replyMessage(event.replyToken, errorMessage);
    }
  }

  // ËôïÁêÜÊñáÂ≠óË®äÊÅØ
  if (event.message.type !== 'text') {
    return Promise.resolve(null);
  }

  const userMessage = event.message.text;
  
  try {
    // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÂïèÂÄôË™ûÊàñÂπ´Âä©Êåá‰ª§
    if (userMessage.match(/^(‰Ω†Â•Ω|ÂìàÂõâ|hello|hi|Âπ´Âä©|help|‰ΩøÁî®Ë™™Êòé)/i)) {
      const helpMessage = {
        type: 'text',
        text: 'üåü Ê≠°Ëøé‰ΩøÁî®Êô∫ÊÖßÁ©∫Ê∞£ÂìÅË≥™Ê©üÂô®‰∫∫ÔºÅ\n\n' +
              'üìã Êü•Ë©¢ÂäüËÉΩÔºö\n' +
              '‚Ä¢ ÂñÆÂüéÂ∏ÇÔºö„ÄåÂè∞ÂåóÁ©∫Ê∞£ÂìÅË≥™„Äç\n' +
              '‚Ä¢ Â§öÂüéÂ∏ÇÊØîËºÉÔºö„ÄåÊØîËºÉÂè∞ÂåóÈ´òÈõÑÂè∞‰∏≠„Äç\n' +
              '‚Ä¢ ÈôÑËøëÊü•Ë©¢ÔºöÁõ¥Êé•ÂàÜ‰∫´‰ΩçÁΩÆ\n\n' +
              'üîî Ë®ÇÈñ±ÂäüËÉΩÔºö\n' +
              '‚Ä¢ Ë®ÇÈñ±ÂüéÂ∏ÇÔºö„ÄåË®ÇÈñ±Âè∞Âåó„Äç\n' +
              '‚Ä¢ Êü•ÁúãË®ÇÈñ±Ôºö„ÄåÊàëÁöÑË®ÇÈñ±„Äç\n' +
              '‚Ä¢ ÂèñÊ∂àË®ÇÈñ±Ôºö„ÄåÂèñÊ∂àË®ÇÈñ±Âè∞Âåó„Äç\n\n' +
              '‚ú® Êô∫ÊÖßÂäüËÉΩÔºö\n' +
              '‚Ä¢ üìä Â∞àÊ•≠ÂÅ•Â∫∑Âª∫Ë≠∞\n' +
              '‚Ä¢ üåÖ ÊØèÊó•ÂÆöÊôÇÂ†±Âëä\n' +
              '‚Ä¢ üö® Á©∫Ê∞£ÂìÅË≥™Ë≠¶Â†±\n' +
              '‚Ä¢ üìç GPSÂÆö‰ΩçÊü•Ë©¢\n\n' +
              'üåç ÊîØÊè¥Âè∞ÁÅ£ÂêÑÁ∏£Â∏ÇÂèäÂúãÈöõ‰∏ªË¶ÅÂüéÂ∏Ç'
      };
      
      return client.replyMessage(event.replyToken, [helpMessage, createCityQuickReply()]);
    }

    // Ëß£ÊûêÊü•Ë©¢ÁöÑÂÖßÂÆπ
    const queryResult = parseQuery(userMessage);
    
    // ËôïÁêÜË®ÇÈñ±ÂäüËÉΩ
    if (queryResult && queryResult.type === 'subscribe') {
      if (queryResult.city) {
        const success = addSubscription(userId, queryResult.city);
        const message = success ? 
          `‚úÖ Â∑≤ÊàêÂäüË®ÇÈñ± ${queryResult.cityName} ÁöÑÁ©∫Ê∞£ÂìÅË≥™ÊèêÈÜíÔºÅ\n\nüìÖ ÊØèÊó• 08:00 Êé®ÈÄÅÁ©∫Ê∞£ÂìÅË≥™Â†±Âëä\nüö® AQI>100 ÊôÇÁôºÈÄÅÁ∑äÊÄ•Ë≠¶Â†±\n\nËº∏ÂÖ•„ÄåÊàëÁöÑË®ÇÈñ±„ÄçÊü•ÁúãÊâÄÊúâË®ÇÈñ±\nËº∏ÂÖ•„ÄåÂèñÊ∂àË®ÇÈñ±${queryResult.cityName}„ÄçÂèØÂèñÊ∂à` :
          `üìã ÊÇ®Â∑≤Á∂ìË®ÇÈñ±‰∫Ü ${queryResult.cityName} ÁöÑÁ©∫Ê∞£ÂìÅË≥™ÊèêÈÜí`;
          
        return client.replyMessage(event.replyToken, { type: 'text', text: message });
      } else {
        const subscribeHelp = {
          type: 'text',
          text: 'üîî Ë®ÇÈñ±Á©∫Ê∞£ÂìÅË≥™ÊèêÈÜí\n\n‰ΩøÁî®ÊñπÂºèÔºö\n‚Ä¢ „ÄåË®ÇÈñ±Âè∞Âåó„Äç\n‚Ä¢ „ÄåË®ÇÈñ±È´òÈõÑ„Äç\n‚Ä¢ „ÄåË®ÇÈñ±Êñ∞Âä†Âù°„Äç\n\nË®ÇÈñ±ÂæåÊØèÊó•ÊúÉÊé®ÈÄÅÁ©∫Ê∞£ÂìÅË≥™Â†±ÂëäÔºå‰∏¶Âú®Á©∫Ê∞£ÂìÅË≥™ÊÉ°ÂåñÊôÇÁôºÈÄÅË≠¶Â†±„ÄÇ'
        };
        return client.replyMessage(event.replyToken, [subscribeHelp, createCityQuickReply()]);
      }
    }

    // ËôïÁêÜÂèñÊ∂àË®ÇÈñ±
    if (queryResult && queryResult.type === 'unsubscribe') {
      // Ê™¢Êü•ÊòØÂê¶ÊåáÂÆö‰∫ÜÂüéÂ∏Ç
      let cityToUnsubscribe = null;
      let cityNameToUnsubscribe = null;
      
      for (const [chinese, english] of Object.entries(cityMap)) {
        if (userMessage.includes(chinese)) {
          cityToUnsubscribe = english;
          cityNameToUnsubscribe = chinese;
          break;
        }
      }
      
      if (cityToUnsubscribe) {
        const success = removeSubscription(userId, cityToUnsubscribe);
        const message = success ?
          `‚úÖ Â∑≤ÂèñÊ∂àË®ÇÈñ± ${cityNameToUnsubscribe} ÁöÑÁ©∫Ê∞£ÂìÅË≥™ÊèêÈÜí` :
          `‚ùå ÊÇ®Ê≤íÊúâË®ÇÈñ± ${cityNameToUnsubscribe} ÁöÑÊèêÈÜí`;
        return client.replyMessage(event.replyToken, { type: 'text', text: message });
      } else {
        // ÂèñÊ∂àÊâÄÊúâË®ÇÈñ±
        const userSub = getUserSubscriptions(userId);
        if (userSub.cities.length > 0) {
          subscriptions.delete(userId);
          return client.replyMessage(event.replyToken, { 
            type: 'text', 
            text: '‚úÖ Â∑≤ÂèñÊ∂àÊâÄÊúâÁ©∫Ê∞£ÂìÅË≥™ÊèêÈÜíË®ÇÈñ±' 
          });
        } else {
          return client.replyMessage(event.replyToken, { 
            type: 'text', 
            text: '‚ùå ÊÇ®ÁõÆÂâçÊ≤íÊúâ‰ªª‰ΩïË®ÇÈñ±' 
          });
        }
      }
    }

    // ËôïÁêÜÊü•ÁúãË®ÇÈñ±Ê∏ÖÂñÆ
    if (queryResult && queryResult.type === 'list_subscriptions') {
      const userSub = getUserSubscriptions(userId);
      if (userSub.cities.length === 0) {
        const noSubMessage = {
          type: 'text',
          text: 'üìã ÊÇ®ÁõÆÂâçÊ≤íÊúâË®ÇÈñ±‰ªª‰ΩïÂüéÂ∏Ç\n\nüí° ‰ΩøÁî®„ÄåË®ÇÈñ±Âè∞Âåó„ÄçÈñãÂßãË®ÇÈñ±Á©∫Ê∞£ÂìÅË≥™ÊèêÈÜí\n\nË®ÇÈñ±ÂæåÂèØ‰∫´ÂèóÔºö\n‚Ä¢ üåÖ ÊØèÊó•Á©∫Ê∞£ÂìÅË≥™Â†±Âëä\n‚Ä¢ üö® Á©∫Ê∞£ÂìÅË≥™ÊÉ°ÂåñË≠¶Â†±\n‚Ä¢ üìä ÂÄã‰∫∫ÂåñÂÅ•Â∫∑Âª∫Ë≠∞'
        };
        return client.replyMessage(event.replyToken, [noSubMessage, createCityQuickReply()]);
      }
      
      const cityNames = userSub.cities.map(city => {
        const chinese = Object.keys(cityMap).find(key => cityMap[key] === city);
        return chinese || city;
      });
      
      const subListMessage = {
        type: 'text',
        text: `üìã ÊÇ®ÁöÑË®ÇÈñ±Ê∏ÖÂñÆÔºö\n\n${cityNames.map((city, index) => `${index + 1}. ${city}`).join('\n')}\n\n‚öôÔ∏è Ë®≠ÂÆöÔºö\n‚Ä¢ üìÖ ÊØèÊó•Â†±ÂëäÔºöÂ∑≤ÈñãÂïü\n‚Ä¢ üö® Á∑äÊÄ•Ë≠¶Â†±ÔºöÂ∑≤ÈñãÂïü\n‚Ä¢ ‚ö†Ô∏è Ë≠¶Â†±ÈñæÂÄºÔºöAQI > 100\n\nüí° Ëº∏ÂÖ•„ÄåÂèñÊ∂àË®ÇÈñ±[ÂüéÂ∏ÇÂêç]„ÄçÂèØÂèñÊ∂àÁâπÂÆöÂüéÂ∏Ç`
      };
      return client.replyMessage(event.replyToken, subListMessage);
    }

    if (!queryResult) {
      const notFoundMessage = {
        type: 'text',
        text: 'ü§î Êä±Ê≠âÔºåÊàëÁÑ°Ê≥ïË≠òÂà•ÊÇ®Ë¶ÅÊü•Ë©¢ÁöÑÂÖßÂÆπ„ÄÇ\n\nË´ãÂòóË©¶Ôºö\n‚Ä¢ Êü•Ë©¢Ôºö„ÄåÂè∞ÂåóÁ©∫Ê∞£ÂìÅË≥™„Äç\n‚Ä¢ ÊØîËºÉÔºö„ÄåÊØîËºÉÂè∞ÂåóÈ´òÈõÑ„Äç\n‚Ä¢ Ë®ÇÈñ±Ôºö„ÄåË®ÇÈñ±Âè∞Âåó„Äç\n‚Ä¢ ÂÆö‰ΩçÔºöÂàÜ‰∫´ÊÇ®ÁöÑ‰ΩçÁΩÆ'
      };
      
      return client.replyMessage(event.replyToken, [notFoundMessage, createCityQuickReply()]);
    }

    // ËôïÁêÜÂ§öÂüéÂ∏ÇÊØîËºÉ
    if (queryResult.type === 'compare') {
      const citiesData = await getMultipleCitiesAirQuality(queryResult.cities);
      
      if (citiesData.length === 0) {
        const errorMessage = {
          type: 'text',
          text: 'üòµ Êä±Ê≠âÔºåÁÑ°Ê≥ïÁç≤ÂèñÈÄô‰∫õÂüéÂ∏ÇÁöÑÁ©∫Ê∞£ÂìÅË≥™Êï∏Êìö„ÄÇ\nË´ãÁ®çÂæåÂÜçË©¶ÔºåÊàñÂòóË©¶ÂÖ∂‰ªñÂüéÂ∏Ç„ÄÇ'
        };
        return client.replyMessage(event.replyToken, [errorMessage, createCityQuickReply()]);
      }
      
      if (citiesData.length === 1) {
        // Â¶ÇÊûúÂè™Êúâ‰∏ÄÂÄãÂüéÂ∏ÇÊúâÊï∏ÊìöÔºåËøîÂõûÂñÆÂüéÂ∏ÇÊü•Ë©¢ÁµêÊûú
        const flexMessage = createAirQualityFlexMessage(citiesData[0]);
        return client.replyMessage(event.replyToken, flexMessage);
      }
      
      // ÂâµÂª∫ÊØîËºÉÁµêÊûú
      const comparisonMessage = createCityComparisonFlexMessage(citiesData);
      return client.replyMessage(event.replyToken, comparisonMessage);
    }

    // ËôïÁêÜÂñÆÂüéÂ∏ÇÊü•Ë©¢
    if (queryResult.type === 'single') {
      const airQualityData = await getAirQuality(queryResult.city);
      const flexMessage = createAirQualityFlexMessage(airQualityData);
      
      return client.replyMessage(event.replyToken, flexMessage);
    }
    
  } catch (error) {
    console.error('ËôïÁêÜË®äÊÅØÈåØË™§:', error);
    
    const errorMessage = {
      type: 'text',
      text: 'üòµ Êä±Ê≠âÔºåÊü•Ë©¢Á©∫Ê∞£ÂìÅË≥™ÊôÇÁôºÁîüÈåØË™§„ÄÇ\nË´ãÁ®çÂæåÂÜçË©¶ÔºåÊàñÂòóË©¶Êü•Ë©¢ÂÖ∂‰ªñÂüéÂ∏Ç„ÄÇ'
    };
    
    return client.replyMessage(event.replyToken, [errorMessage, createCityQuickReply()]);
  }
}

// WebhookÁ´ØÈªû
app.post('/webhook', line.middleware(config), (req, res) => {
  Promise
    .all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error('WebhookËôïÁêÜÈåØË™§:', err);
      res.status(500).end();
    });
});

// ‰ªãÁ¥πÁ∂≤È†ÅÁ´ØÈªû
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ÂÅ•Â∫∑Ê™¢Êü•Á´ØÈªû
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'LINEÁ©∫Ê∞£ÂìÅË≥™Ê©üÂô®‰∫∫Ê≠£Â∏∏ÈÅãË°å‰∏≠ÔºÅ',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    features: [
      'Âç≥ÊôÇÁ©∫Ê∞£ÂìÅË≥™Êü•Ë©¢',
      'Â§öÂüéÂ∏ÇÊØîËºÉ',
      'Êô∫ÊÖßÂÅ•Â∫∑Âª∫Ë≠∞',
      'Ë®ÇÈñ±ÊèêÈÜíÁ≥ªÁµ±',
      'GPSÂÆö‰ΩçÊü•Ë©¢'
    ]
  });
});

// APIÁ´ØÈªû - Áç≤ÂèñÂüéÂ∏ÇÁ©∫Ê∞£ÂìÅË≥™
app.get('/api/air-quality/:city', async (req, res) => {
  try {
    const city = req.params.city;
    const airQualityData = await getAirQuality(city);
    res.json(airQualityData);
  } catch (error) {
    res.status(500).json({ error: 'ÁÑ°Ê≥ïÁç≤ÂèñÁ©∫Ê∞£ÂìÅË≥™Êï∏Êìö' });
  }
});

// ÂïüÂãïÊúçÂãôÂô®
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`LINEÊô∫ÊÖßÁ©∫Ê∞£ÂìÅË≥™Ê©üÂô®‰∫∫Âú®Á´ØÂè£ ${port} ‰∏äÈÅãË°å`);
  console.log('ÂäüËÉΩÂàóË°®Ôºö');
  console.log('‚úÖ Âç≥ÊôÇÁ©∫Ê∞£ÂìÅË≥™Êü•Ë©¢');
  console.log('‚úÖ Â§öÂüéÂ∏ÇÊØîËºÉÂäüËÉΩ');
  console.log('‚úÖ Êô∫ÊÖßÂÅ•Â∫∑Âª∫Ë≠∞Á≥ªÁµ±');
  console.log('‚úÖ Ë®ÇÈñ±ÊèêÈÜíÁ≥ªÁµ±');
  console.log('‚úÖ GPSÂÆö‰ΩçÊü•Ë©¢');
  console.log('‚úÖ Á≤æÁæé‰ªãÁ¥πÁ∂≤È†Å');
});